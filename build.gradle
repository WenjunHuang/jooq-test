import javax.xml.bind.JAXB
import org.jooq.util.GenerationTool

group 'jooq'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.9.0'
        classpath 'mysql:mysql-connector-java:6.0.6'
    }
}

apply plugin: 'java'
apply plugin: 'scala'


repositories {
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}

dependencies {
    compile("org.scala-lang:scala-library:2.12.1")
    compile("org.scala-lang:scala-compiler:2.12.1")
    compile 'org.jooq:jooq:3.9.1'
    compile 'org.jooq:jooq-scala:3.9.1'
    runtime 'mysql:mysql-connector-java:6.0.6'
    testCompile("org.scalactic:scalactic_2.12:3.0.1")
    testCompile("org.scalatest:scalatest_2.12:3.0.1")
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
    jdbc() {
        driver('com.mysql.jdbc.Driver')
        url('jdbc:mysql://192.168.56.101:3306/test')
        user('root')
        password('example')
    }
    generator() {
        database() {
        }
        generate() {
        }
        target() {
            packageName('org.jooq.example.gradle.db')
            directory('src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
GenerationTool.main(
        JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)